eq = '''5 + (9 + (7 + 5 + 3 * 8 + 4 * 6) + 9 * 8 * 7)
(6 + 9 + 2 * 7) + ((6 + 3 + 9) + 5) + (6 * 7 * 7 + (2 * 4 + 2 * 8 * 5 + 3) * (3 + 3 + 6) + 9)
3 + 8 * 4 * 4 * (3 + 4 * 5 + 7 + (4 * 4 + 4))
(7 + (2 + 2) * (9 * 8 + 6)) + 2
(5 + (8 + 9 + 2) * 2 + 8 + 2 * 8) + 4
5 * 9 * (7 + 8 + 6 * 2 + (2 + 4 * 2) * 5) * 9 + 4
4 * (9 * 3) * (2 + 5 + 4 * 7 * 9 * 4) + 6 + (3 + 9)
8 + 9 * (7 + (5 + 8 + 2 * 4 * 4 + 9) + 3 + 4)
(3 + (9 + 6) * 8) + 3 * 8
6 * 7 + (8 + 7 + 7)
2 * 3 * 4 + (3 * 2 * (3 * 6) + 5 * 4 * 4) + 5 * 5
4 * ((5 + 9) + 4 + 6 * 3 + 7 + 6) + 7 + (8 * 7 * 8 * 2 * 6) + 7
((6 * 9 + 3 * 2 * 9) * 4 * 2 * (7 * 6 * 3 * 6 * 4 * 4) * (9 * 5 * 3 * 6 * 4 + 2) + 8) + 9 + 9 + 9 + 9
(2 + 4 * 3 * 6) + (5 + 8 + 3) * 2 + (2 * 8 + 2 + 9)
5 * (4 * 2 + 3) + 5 * 3 + 3
6 * 8 + 5 * ((8 * 9 + 3 * 4 + 4) * 7 * (3 + 6)) * (7 + (8 * 6 * 5 + 3 * 9) * 8 * 7 + 5 * 5) + 6
(7 + 9 * 5 * 5) * 6 + 9 + 8 + (8 + 6 * 6) * 8
(8 + (2 * 7) * 3 * 8) * 6
3 * ((2 + 7 * 3 + 5 * 3) + 9 * 5 + 2) + 2
((4 + 4 + 4 + 4 * 5 + 4) * (2 * 9) * 6 + 5) + ((6 + 3 * 6) + 6 * (3 * 5 + 7) + 9) + 2 + 8 * 4 * (6 + 2 * 5 + 8)
7 * 9 * 7 + (4 * 3 + 5 * 6 + 2) * 5
5 + ((6 + 4 + 4) + 5)
9 * 4 + 3 * 5 + 6 * (4 + 5 + (3 + 8 * 6 * 9 + 4) * 5)
2 + 9 + 9 + (2 * 6) * (8 * 8 * 2)
(6 * 2 * 3 + 4 * 8 * (3 + 8 + 2 * 5 * 5 * 2)) * 4 + 8 * 7 * 8
(8 + (7 * 3 * 6) * 4 + 8 * 2 + 6) * ((5 + 5 + 9) + 9 * 4 * 2 + (5 + 9 + 9) * 9) + 2 * 9 * 5
(6 * 3 + 7 + 8 + 6) * 3
7 + 3 + (3 * 8 + 2 + 3 + 7) * 7 + 4
((4 * 2 + 7 + 4) * (7 + 4 + 9 + 5)) * 9
9 + 4 * (5 * (6 + 9 * 2)) + 2 * 4 + (8 * 9 * 5 + (3 * 6 * 9 + 8 + 9 + 2) + 8 * 4)
8 * 2 + 3 * 5 * 7
((4 + 2 + 8 + 7) + 5) * 7
6 + 7 + ((9 * 3 + 7 + 2 * 2) + 3 + (2 * 5 + 3 * 3 * 3 + 3) + 5)
(7 + 6 + 4 * 4) + 7 * 6 + 3
8 + 8 * 2 + (8 + (9 + 2 + 5))
6 + 7 * 6 * 6 * ((5 + 6 + 5 + 6 * 6 + 2) + (6 * 4) * 7 * 4) + 3
((8 + 2 + 6) + 7 + 6 * 7 + 5 * 5) + 5 * 4
2 * ((2 * 8 + 8 + 5 + 8) + 6 + (7 * 8 + 8 + 2)) + (7 * (5 * 4 + 5 + 5 + 7 + 8) * (9 * 9 + 5 + 2) + 8 + (8 + 3 + 7 * 5 + 2 * 8)) + 2
4 + 6 * ((3 * 6 + 2 * 5 * 9 + 4) * 7) * 6 + 4
2 + 2 * 3 + 3 + 6 * (5 * 8 * 7 * (7 * 4 * 9) * 7)
8 * 5 + 9 + (8 + 6 * 5 * (7 + 7)) * 2 + 5
4 * 7 * 7 + (5 * 8 * (6 * 7 + 9) * 7 * 8 + 4) * 9 * 9
8 * 7 + 2 + 9 * 6 + (4 + (2 * 8 + 7) * 2)
7 + (7 * (5 * 8 + 7 + 5 * 6 + 5))
7 + (7 * 2 + (3 + 8 + 7 + 9 * 6 + 6)) + 3
((4 * 2 * 3) + 5 + 2 + 9 * 6) * (8 * 8 * 6)
(3 * (4 * 8 + 3 + 5 * 7) * 9 + (6 * 4 * 4 + 9 * 5 * 7) + 3 * 3) + 6 * 6 + 4 + (2 * 8 + 6 * 9 + 8 + 3) * 7
4 * 2 + 6 * 6
6 * 4 + (6 + 3 * 3 + (6 * 6) * (2 + 9 + 5 * 2)) * 9
2 + 3 + 6 + 9 + 6 + 4
7 + 5 + 3 + (8 * 5 * (8 * 2 + 7 * 5 + 5 * 8) * 8 + 3 * (4 * 7)) * 5 + 6
6 * 2 * 2 * 7 + (7 * 4 + 9 + 6)
4 + 3 + 8 * 6 * 7
4 * ((7 + 4 + 7 * 2 * 4 * 5) + (7 + 4 + 7 + 7 * 7 + 4) + 4 + 3 + (2 * 8 * 4 * 9 + 5) + 7) + 8 * 6 + (2 + 3 * 3 * 2 * 4) + (9 * 7 + 8 * 4)
(3 + 8) + 4
(5 * 3 * (4 + 7 + 7 * 4) * 4 * (5 + 4) + 6) + (4 * 7 + 2 + 3) + 7 * 6
(7 * 2 * 3 * (8 * 2 + 8 * 4 * 9)) * 7 + 8 * 4
9 + 2
6 + 4 + (4 + 7 * 9 + 6 * (2 * 2 + 9 * 6 * 2) * (3 + 7 + 6 + 6 * 9))
9 + ((5 * 9 * 4 + 3 + 2 * 6) + 9 * (7 + 4 * 7 * 6 * 3 * 8) * 4 + 4 + (5 * 8)) + (7 * 3 + (2 + 6 * 9 + 9 + 3 + 4) * 5) + ((4 * 4 + 5) * (7 * 3 + 5 * 7) * 6 + 9 * (3 * 2 * 5 * 2 + 3))
3 * 9 + 8 * ((4 + 2 + 5 * 2) * 7) * (5 * 7 * 9 * 8 + 2 * 6)
6 + 7 * (2 + 7 + (8 + 6 + 3) + (9 * 8 * 6)) + 3
(3 + 7 + 3 + 7 * 3 + 8) * 3
5 * 9 + 3 + 3 + 4 * 9
7 + (2 * 4 + (9 + 7)) * 4
(6 + 5) + 6 * 6 + 7
(6 * 7 * 9 * 7 + 4 + 6) * (6 * 4 * 7) + (2 + 5) + (7 + 5)
4 + 6 * 9 + 4 * (5 * (3 + 7 + 8) + 5)
6 * 3 * (3 * 3 + (6 * 3 + 3 + 4 + 5)) + (4 * 3 * 9) * 4 * 5
((9 + 6 + 2 * 8 * 9) + (9 + 5 * 3 + 4 * 4 + 9) * 4 + 8 * 7) * 4 + 4
5 + 5
4 + 6 * 4
3 * 7
4 + ((3 * 4 * 7 + 2 + 6 * 7) + 9) * 3 * 9
7 + 8 * (9 * 2) + 3 + 5
(7 + (3 * 6 * 5 + 9 + 4) + 8 * 9 * 4) + 6 * 5 * ((7 + 9 + 7 * 2 + 4) + 4)
6 * (8 * 5 + 8) + 6 * (7 + 6 * 5)
(9 * 7) + 7 * 6 + 2 * (7 * (9 + 9 * 6 + 5 * 6) + (7 + 2 + 4 + 7))
(6 * 9 * 5 * 9) + 2 * 9 * (3 + (5 + 4 * 2) * 8 * 9) * 3
(3 + 2 * (4 * 9 * 2 * 8 * 3 * 9) * (9 * 4 + 9) * 5) * (5 * (8 * 7 + 2 * 4 * 3 + 3)) + 6
4 * 9 * (2 + 5 * 9 * (7 * 5) + 9 * 5) + 5 * 4
(7 * (9 + 3 * 7 + 9)) * 5 * 7
(7 + 9) * 3 + 7 * 6 + 7 * (7 + 7 * (7 + 5 + 8 + 8 + 9 + 4) + 9 + 9 + 8)
7 * 7 + 3 + ((9 * 2 + 7) * (7 * 2 * 3 + 6 + 7) * 7 * 8) * 9
(4 + (5 + 2) * 3 * 4) * 6 * 8 * 2 * (3 * (3 + 7 + 2 + 2 * 4 + 3))
6 + (7 * 3) * 9 * ((4 * 8 * 8) * 9 + 5 + 5)
4 * ((8 * 9 * 2 * 7 + 4) * 8) * 3 * 5
8 * (8 + 2 * (9 + 6 * 9 * 4) * 2) * (4 * 8) + 2
6 + 9 + 5 * 7 * (3 + (9 * 9) + 2 * 9 + (6 * 4) + (7 * 6 * 3 + 3 * 5))
((3 * 3 + 3 + 4) + 9 * 7) * 3
5 * 7 + ((5 + 3 + 9) + 2 * 9) * 5 * (6 * (6 + 5 * 3 * 4 * 9) + (2 * 2 + 3 + 4 + 5 + 4)) * (2 * 3)
((8 * 2) + 7 * 2 * 6 * 7) + (6 + 2 + 6 * 5) + (5 * 7 + 6 * 9) * 9 + 3 * ((8 + 7) * 3 * 8 * 2)
(3 * (3 * 8) + (7 + 3 + 8 * 7 * 9 * 9) * 8 + 2) * 9 * 8
7 + (6 + (9 * 6) + 8 + 9)
7 + (6 + 7 + 2 + 9 * (9 + 4 + 8) + 9) * 2 * 5 + (5 * 9 + 6 * 8) + 5
(8 * (7 * 9) * (4 * 6 * 7) * 5 + 9 * 5) * 8 + 5 * 4 * 6
5 + (5 + 6 + 9 * 7 + 3) * 3 * 5 * 8
6 + (6 + 9 + 4 * 6) * 8 + 6
4 * 8 * 6 + 2 + 9 + ((2 * 8 + 7) * 8 * (3 * 9 * 8 + 4 * 8 + 5) * 9 + 8)
8 + 9 + 4 + 8 + (3 * (9 + 6) + 9 * 9 * 5) * 2
6 + (4 + 7) * 5 * 2 * 8 * 3
4 + ((4 + 7 * 9) + (2 + 9 + 9 * 6) * 2 + 9)
6 + ((4 + 6) + 8 + 8 + 4 * 7) * (8 + 7 * 2 * 3 + 2) + 6 + (4 + 3)
6 + ((6 * 6 * 6 * 3 + 4) * (5 + 3 + 9 * 2 * 7 + 9) * (4 * 3 + 3 + 9 + 7) * 9 + (9 * 8 + 3 * 6 * 9 * 7)) + 3 + 2 + 2 * 8
8 * 5 + 2 * 7 * (9 * 6 + 2 * (2 + 5 + 3 + 3 * 2 * 3) + 7) * 6
(8 + 9 * 9 + (6 * 6)) * 3 * 8 + 5 + 7
2 + (4 + (2 + 2 + 5 + 2))
(4 * 4 + (6 * 6 * 7 + 7 * 9)) + 3
8 + 6 * 6 + ((8 * 8 * 8 + 3 * 5 * 8) + 8 * 9) + 3
2 + ((7 + 9 + 8 * 3) + 5 * 4 * 8 * 4 + 5) + 7 + 3
6 + 7 * 3 + 3 + 9 * (2 * 4)
5 + (6 * 7 + 5 + 7 + 5) * 5 * 5 * (7 + 3 + 2 * 9 * 9 + 4) * (2 * 3 + 2 + (9 + 2 + 2 * 5))
7 + 7 + (7 * 6 * 6 + 6 + 5)
7 * 2 + (2 * (2 * 8) * (8 * 7 + 9 + 5) + 5 + 4 * 8) * (2 + 9) * 3 * 6
(7 + 6) * 8 + (2 + 2) + 9 * 6 + (9 + 6 * 2)
9 * 4 * (6 + 8 + 3 * 6 + 3) * 2 + (2 + (4 + 7) + (8 + 4 * 2 * 2 * 7 + 2) + (6 + 6 * 9 + 3 + 6) * 3 + 2) + 2
9 + ((9 + 9 * 3 + 2) + 2 * 5 + 7 + 2 * 3)
8 + 5 + 4 * ((8 * 5) * 7 + (8 + 5) * 4 + 8 + 3) * 9
3 + 5 + 7 * 8
4 * 9 * 4 * 8 + (9 * 3)
(9 + 4 * 3 * 9 + 9) + 5 + 8 + (6 + 9 + 9 * 2 * (5 + 4 + 3 * 6 * 4))
5 + (9 * 6 * (2 + 9 * 7) * 9 * (7 + 5) * 6) * 7 + 6 + 5
(4 * 8) * (4 + 6 * 3 * 5) * 4 + 4
4 * 5 + (8 * (6 + 9 + 2 + 7 + 7 * 5) * 5) + 5 * 7 * 4
4 + (3 + (5 + 5 * 8 * 7 * 2) + 4 + 7) + (7 + 8 + (9 + 4 * 3 * 3)) + (6 + 2 * (6 + 8) * 7 * 8) * 7
6 * 6 * (4 + 5 + 2 * (7 + 8 + 2 * 8 * 3) * 3 * 2) + 2 + (5 + (5 + 9) * 7 + 9) + 6
5 * 9 + 3 + (6 + 7 + 6 * 2 * (9 * 8 + 3)) + 6 + (3 + 9 * 3 + 7)
5 * 4 + 9 * 2 * (4 * 3 + (7 * 5) * 4)
4 * 4 + (7 + 2 * 8 + 5 * 5 * 2) + 5
5 * 9 * 9 + 7 + ((4 * 5 * 6 * 9 * 3) * 3 * 7 * (3 + 3 + 3 + 9)) * (4 * 9)
3 + 7 + 6 * (5 + 3 * (4 * 6) * 8 * (2 + 3 + 7 * 9) * 8) + 2 + (7 * 9)
7 + 3 * (6 * (7 * 7)) + 5
6 + ((7 + 9 + 4 * 8) * 5 * 2 * 8 * 5) + 5
9 + (4 + 4) + 8 * 3
2 + (2 + 9 * 2 * 4 * (7 * 6 * 2 * 8) * 8) * 2 * 5 + 4
9 * ((2 + 4 + 9) * 8 + 8 * 9)
(6 + 4 + 7 + 5 + (8 + 2 * 2)) * 8 + 3 * 5 * 7
(4 * 8 * 6 + 4) + 5
6 * 9 + 4 * 6 + (6 + 3 + 4 * 9 * 9 + 5) * 2
4 + (7 * 7 * 3) + 7 + 9 + 8 * (8 * (9 + 6) * 9 + 3 + 5)
6 * 6 + 2 * 4 + 2
9 + (4 + 7 * 2 + 9 * 6) + 4 + ((9 * 7 + 4 + 8 + 3) * (4 * 6 + 5) * (6 * 8 * 2)) + 8
5 * 4 + (5 + (8 * 2 * 5 * 7 * 6) * 5 * 7 * (4 * 7 + 7 + 5 + 6 + 5) + 4) + 3
5 * 6 + (5 + (5 * 7 + 3 + 9 + 3)) + ((6 + 9 + 4 * 4) + 5 + 4) * 8 * (5 + (9 + 9 + 7))
2 * 4 + (7 + (8 * 3 + 4 + 6) + 8 * (5 + 4 + 2)) * 6 + (2 * 7 + 2 + 9)
7 + 3 + 7 + (3 + 9)
4 * 7 + 9 + ((7 * 3) * 6 * 4) + 7 * (3 + 9)
3 + 6 + (8 + 2) + 9
(9 + 7 + (2 + 9 * 5)) + 2
2 + (8 + (5 * 6 + 5 + 2 * 3 * 7) * 4 * (8 * 8 * 7 * 2 * 4 + 8) * 5 + 6) * ((3 + 4 + 8 + 6 * 7) * 7 * 9 * 8)
4 + (3 + (6 * 4 * 5 * 4) * (6 + 4 * 4 + 3)) + 9
3 * (2 * 4 + 3) + ((4 * 2 + 9 + 9) * 4 * 9 + 4) + 7 + (8 * 7 + 2 * 6 + 8 + 6) + 4
7 * (5 * 4 * 8 + 4)
(2 * 9 + (7 * 3 * 2 + 3 * 6) + (5 + 6 * 5 * 6 * 4 * 7) * (7 + 6 * 9 + 3 * 5)) * 2
(7 * (3 + 7 * 9 + 5 * 7) * 2 * 9 * 5) * 8 * (2 + 2 * 5 + 8 * 4 * 2) + 5
(4 + (9 * 5 + 8 + 8) + 7 * 4 * 6 * 4) + 4 + 5
7 + 9 * (4 + 2 * 2) + (8 + 7 + 9)
4 * 5 * (8 + 6 + 9) + 5
(7 + 7 + 4 + 7 * (6 * 6 * 9 * 2 + 2 + 8) * 3) * 4 * 5 * 9 + 3
8 * 7 + 2 * (8 * 7 * (9 * 8 * 2 * 5 + 5) * 2 * 5) + 3
(4 * 7) + (9 + 5) * 4
5 + 9 * 6 + 2 * 7 * 2
4 * 8 + 6 * ((4 + 6 + 2 + 9 * 4 * 7) + 9 * 8 + (4 + 6 * 9 * 8 * 3) + 2 + 5)
3 + (4 * 2 + 7 + 2) * 4 * 2 * 8
6 * 9 + ((3 * 3 + 2 * 2 + 4 + 9) * 6 + 5) + 2
8 + 2 + ((6 * 8 * 5 * 6 * 6) * 3 * 5 * 8)
8 + (5 * 4 + (7 + 7 * 6 + 3) * 8) * 3 * 8 + 2 + 8
((6 + 9 + 7 * 7) * 4 + 5 + (8 + 9 + 5)) * 4 * 5 + 2 + 5 * 5
(3 * 2 * 9 + 4 * 5 * (5 + 9 * 8 + 2)) + 8 + 7 + 7
((6 * 6 * 4 + 2) * (3 * 3 * 5 + 4 * 6) * 3) + 6 * 4 + 6 * 6
5 + 9 * (4 * 7)
5 + 3 + 2
((9 * 3 * 9 + 6) + 5) * 5 * 4 + 8 + 9 * 3
(9 + (4 + 5 * 9 + 4) + 4) + (5 * 2 + 2 * 5 * 8 * 9) * 8 + 8
((8 * 3 + 7) + 6 + 7 * 9 + 2) * 9 * 8 * 9 * (5 + 8 + 3 + 4 * 4 * 5) + 8
(5 + 8 + 4 + 5 + 7) + 8 + (5 * (9 * 8) + 6 * 9) * 8 * 3 + 2
(2 * 8 + 2) + 4
(4 + 5 + 2 + 3 + 9 + 5) + 6 + (6 + 9 + (4 * 8) + 2 + 2) * (4 + 7 + 5 + 5 * 8 + 8) + 8
9 * 2 + 3 * (3 + 3 * 3 * 7) * 5 * 8
(7 * 6 * (2 * 9 * 8) * 6 + 2 + (2 + 2 + 7 * 5 * 4)) * 6 * 7 + 2
5 * 2 * 5 + (7 + 4 * 7 * 2 + 7) * (8 * 6 * 2 * 9 * 4)
7 + 9 + (4 + 6) + ((5 * 3 + 8 + 7 * 6 * 9) + 2 + 5 + 3) * 9 + (9 * 6 * (4 + 5 * 8))
((2 * 7 * 6 + 2 * 5) + (5 + 4 + 3 * 5 + 5) + 5 * 9) + 2 * 3 + 8 * 2 * 9
9 * 4 + 7 * (8 + 7) + 2 + 5
6 * ((9 * 4 + 3 * 2 * 9) + 9 + 3 * (2 + 3) * 6) + 7 + 9
5 + 5 + 6 + (3 + 3 + 9 * 3) * 8
9 * ((9 + 8 + 9 * 3 + 3) * 6 + (8 + 3 + 3)) * (8 * 2)
(2 + 4 + 3 + (8 + 5 + 6 * 7 * 2) * 4) + 8
9 * (4 + 7 + (6 * 6 + 2 * 7) + 2 * 4) * 5
2 + 8 * 4 * 6 + 6
((9 + 3 + 9 * 3 * 9) * 7) * 7 + 6 + ((6 * 4 * 2 * 7 * 6 * 7) * 2 * 5 * 4) * 3 + (4 * 9 * 5 * (7 + 5 * 9 * 3))
5 * (3 * (8 + 8 * 4 + 8)) + 6 + 4 * 3 * (6 + 7)
4 + ((8 * 6 + 5) * 6 + 9 * 7 * 6) * 8 + (3 * 9 * 5 * (2 * 3 + 8 + 4 * 8 + 6) * 2) * 3
2 * 2 + ((7 + 2 * 9 * 6 + 6 * 5) + (8 + 3 * 4 + 2 * 3) * 3) + 3 * 9
3 + 5 * 6 + (9 * (8 * 8 + 4 + 3) * 5) + 2
2 + 7 * (3 + 8) + (4 + 9 + 5) + 7
3 * 7 * (3 * 4 + 5 * 5 + 9) + (7 * (5 * 6 * 6 + 5 * 5) * (2 * 5) + (8 + 9) + 8) + ((3 + 6 * 2 * 3 + 7 * 3) + (8 * 6 * 6 * 3))
8 + 9 + ((5 * 3) + 3 + 9 + 3 + 4 * 3)
4 * 8 * (5 * (7 + 6 * 9 * 3) * 4 * 2 * 7) * 2 + 6 * 3
9 * 4 + (4 + 6 + 6 + 7) * 4
(7 * 3 + (6 * 2 * 6) + 5 + 2) * 9 + 2
4 + (8 * 7 * 3 + 4) + 8
8 * (6 * 3 + 5 * 7 * 3 * 5) * 4 + (2 * 4 * 8 + (7 + 9 + 6 + 2 + 5) * 2 * 8) * 3
6 + 3 * 5 * 4 * (7 * 4 * 6 * 5 * 3) * 2
(4 + 8 * 4 + 9 * 8) + (3 + 7 * 4 + 4 + 4 * (3 * 3 * 4 + 9 * 7)) + 3
8 * 9 + (2 + 6 + 7 * 6 * 6) + (9 + 6 + 6) * 4 * (7 * 2 + 2 + 7 + 4 + 3)
(3 * 8 + 2 + 5 * 5) * (8 * 4 * (2 + 9) * 5 + (8 * 8 * 4) * 6)
(6 * (9 + 8) * (6 + 7 + 2 * 8 * 8) + 2 + 8) * 7
7 + (4 + 6 + 7 + (7 * 7) * 5) * 6 * 4 * 2
3 * ((5 * 7 * 4 + 3 * 7 * 5) * 2 * 8 * 2 + 8) * 4 + 4 * 3 * (3 + 7)
7 + ((6 * 5 + 6) + 5 * (5 * 7 + 6 * 3 * 9) * (3 * 4 + 7 * 9) + 5 + 5) + 9 * 8 * (2 * 8 + 6)
(9 + 8 + 8) + 3 + 2 * 9
(2 * 5 * 4 + 9 + 9) * 5 * (2 * 9 + 2 * 4 + (4 * 8 * 9 + 8) + 3) + 3 + 2
(6 + 5 + 3) * 9 + 6 * ((2 * 6 * 3) * 4 * 6)
8 + 8 + 6 * (5 + 5) + 4
3 * 5 * ((9 + 7 * 4 * 6 + 7 + 5) * 3 * 2 * (3 * 8 + 4 * 3 + 7) + 4 * 4)
9 + 6 * 5 + 7 * (4 * 6 * 8)
((5 * 4 + 2 + 7 * 4 * 2) * 2 * 5) * 4 * (2 + 9 * 9 + 9 + 7 + 9) * 4 * 9 + 5
7 * ((6 + 7) + 5 + (3 * 4 + 5) + (3 + 8) * (5 * 2 * 4 + 8))
((8 + 8 + 3) * (5 + 9 + 9) * 4 + 2) * 6 + 8 + 2 * (5 * 8 + 3 + (8 + 5 + 7 + 9 + 4 * 6)) + 6
(6 + 2 * 2) + 8 * 9
2 * 6 * 7 * 2 + 8 * 8
8 + 3 + (6 * (2 + 2 * 8 * 4 * 6 + 2) + (7 + 4 * 8 * 3)) + 9
6 * 8 + (4 * 8 * (8 * 5 + 6 * 7 + 2 + 4) + 3 * 7 + (5 * 9)) + ((8 + 7 * 6 + 3) + 5) * ((3 + 6 * 9) * 8 + 7 + (6 + 3 * 2)) * 8
((2 + 4 * 7 * 4 * 6 + 8) * (6 * 5) + 3 * 3 + 9) * 4 * 6 * 4 + (7 + 4) * 4
(3 + 7 * (8 + 4)) * 9 * 9
(8 * 9 * 3 + 5 + (6 * 7 + 3)) + (6 * 2 * 3 + 7) * 8 + 2 * 8
(9 * 7 * (5 + 5)) + 3 + 3 * (2 + 3 * 2 + 3)
4 + (4 * (4 + 6 + 3 * 3) * 5)
(9 * 4 * 7 + 2) * (6 + 3 + 5) + 6 + 3 + 3 + 6
7 * 5 * 9 + (6 + (4 + 3 + 6 + 7) + 4) * 8 * 6
2 * 2 + 5 + ((5 * 3 * 9 + 2) + (3 + 7 * 9 + 7 * 6 + 2))
8 * ((7 + 3) * 4) * 3 + 2
(5 * 8 * 8 * (2 + 9)) + ((8 * 6 + 4 * 8 * 3) + 3 + 3 * 4 + 4) * 7
(3 + 6 * 7) * 8 * (3 + (9 * 6 + 8 + 9 * 8 + 7) + (5 * 4)) * 5
9 + 8 * 8 + 4 + 4 + 3
5 + 9 * 7 + (4 + 2) + ((9 + 5 * 8 + 2 * 7) + 4 * 9 * 3 * 4)
4 + 5 + 4 + ((5 + 9 + 8 + 2) * 8 + 3 * (9 + 9 * 3 + 9 * 3 * 4) + (2 * 9 + 6 * 5 * 8) * 3)
5 * (4 * 9 * 4 * 4 + 4) * 4 + 9
7 + 6 * 6 + (8 * 9 * 4) * (4 + 8 * 5 * 7) + 4
2 * (2 + 9)
9 + 4 * ((4 + 6 + 9 + 4 * 9) * 3 + 9 + (4 + 8 * 8) + 8) + 4
2 + 6 + (3 * 9 + 4) + 9 * (6 * 8 + 9 + (2 + 6 + 5 * 2 * 5) + 2) * 2
(2 + 2 * 9 + 9 * 8 + (9 * 8)) * 4 + 4 + 7 * (5 + 3) * (4 * (5 + 9 + 8 + 2 + 8) * 4 + 3)
(5 * 7 * 6 * 3 + 7) + 8 * 3
(9 + 9 * 2 * (7 * 3 * 4)) + 2 * 2 * (6 * 5 + (7 * 4 * 2 * 3 + 6 * 5) * 4 * (3 + 8 * 2))
6 + (8 * 4 + 5) * 9
9 + 5 * (4 * 9 + 3 * (3 + 4 * 5 + 7 * 7)) * 6
9 * (7 + 7 + 9 * 5 * 5 * 2) * 2 + 4
7 + 6 + 9 + 5
9 + 3 + 8 + (8 + 6 * (5 + 7 * 2) + 7 + (2 + 7 * 3 * 4 * 4 + 4) + 9) + (6 + (4 + 8 + 8 * 6 * 4) + 4 + 6) + 3
(3 + (4 * 5 * 5 * 9)) * (3 + (8 * 9 + 7 * 6) * 7 + (9 + 4 * 5 + 6) + 3) * 5 + 4
5 * 4 * (5 * 3) * 8 + 4 + 5
7 * (8 + 3 + 7 * (3 * 8 + 2 + 6 * 9 + 6)) + 5 * 8 + 6 + 4
6 * (9 + 2 + 2 + 7 + 6) * 7 + 8 * 6 + 8
8 * (9 * (7 + 2 * 7 + 5 * 6) + (2 * 4 * 3 * 4) + 2) * (6 * 4 * 2 + 5 + 3 + 5) + 6
(7 * 4 + 8) + 8 + 2 * (8 * 3 * 7) + 5
4 + 8 + 8 + 6 * (3 * 6 * (3 + 7 + 9 * 8 + 4) + (6 + 3 * 8 + 7 + 8 * 9)) * 7
(9 * 8 * (2 + 8) * 8 + 4 * 4) + (6 * 4 * 9 * 6) * (4 * 9 * 7 + 4) + 6 * 4
9 + 5 * 3 + (6 + 4 * 9 + (8 * 4 * 5 + 2) + 9) + (3 + 9 * 6 + 5 * (5 * 3 + 5))
4 + (9 + 9 * 6 + 8 * 2)
8 + 8 * 6 + 7 * 9 * (8 + (9 * 5 + 7 + 5))
(9 * 6 + 4 + 8 + 7) * 9 * 2 + (3 * 7 * 8 * 5 * 2)
((8 * 7 * 6 + 5 * 2) * 6 + 3) * (7 + 7 * 8)
4 + 5 + 6 * (6 * 5 + 5 * 3)
(5 * (8 + 3) * 9 * 2 * 3 * 5) + 4 + 8 + 7 * 3
(2 * (9 * 2 * 5 + 7) + 2) * (7 * 8 + (9 + 9 * 8) * 8) * 9
(7 * 8) * 5 + 9 * 4 + (8 + 6 + 9 * 3 + 5)
8 * 7 * 7 + ((8 * 7 * 2 * 4 + 4) * 5 * 8) + 9
4 * 8 * (6 + 9 * 5 + 9 + 4 * 9)
5 * 5 + (4 + 7 + (3 + 6 * 8 * 2 + 6 * 5)) + 2 + (8 * (6 * 3) + 3 * 6 * (5 + 8 * 9 * 9) + 8) + 3
4 + (5 * 9 * 3 + 9 + 9 + 8) + 5 + 4 * 3 * 4
9 + (4 + 3 * 2 * (7 + 8 * 8) * (2 * 9 * 7 * 5 * 4) + (3 + 9 + 7 * 9 * 4 + 6)) * 2 * 3 * ((5 + 6) * 5 * 5 * 2)
6 + ((9 * 9 + 9 + 9 * 5) * 4 * 2 * 8) * 5 * 4 * 9
9 * ((8 + 6 + 7 + 6 + 8) * 2) + 6 + 5 + (3 * 5) + (2 + (9 + 3) + 9)
5 * 5 * 7 + 7 * 6
(4 + 7 * 4 * (6 + 7) + 7) * 4 * 4 * 6 * 7
2 + 2 * ((5 * 4 + 5 * 9) * (9 * 2 + 4 * 7)) * 3 + 2
(3 + 2 * (5 * 4 + 9 + 3 * 7)) + 9 + 4
8 + ((4 + 3 * 9) * 2) + 6
3 * ((7 * 8 + 5 * 7) + 6) * 4 + 8 + 3
(4 * 6 + 6 + (8 + 5 + 9 * 2)) + 9 * 4 * 3 * 9
(8 + (9 + 6 + 7 + 4 * 3) * 7 + 6) + 4 * 2 + 5
8 + 9 + (5 + 4 + (7 + 5 + 9 * 5 * 4 * 4) + (2 + 5 + 9 + 4 * 2))
(3 * (6 * 5 + 8 + 7 * 7 * 3) + (5 * 2)) * (5 + (6 + 5 + 8) * 2)
(7 + (7 * 7 * 4 + 2 + 4 * 5) + 7 + 9 + 7 + 7) + 6 + 6 + ((7 + 6 + 2 * 2) + 7 * 5) + 9 + 5
8 + ((3 + 9 + 3) + 7 + 8 + 2 * 6 * (7 + 2)) + 7 * 4
((3 + 2 * 4) + 6 * 2) * 4
4 * 9 + (8 + (4 + 8 + 6 + 9)) * 8 * ((9 + 8 + 2) + 8 + 8)
(5 + 5 + 8 + 2 * 5 * 8) * 4 + (5 + 2 * 5 + 4 + 9 + 2) + 5 + (9 * 5 * 9 + 6 + 4 * 4)
6 * 3 * 5
(6 + 9 + 8) + (6 + (7 * 6 + 6 + 5 * 9 + 7) * (4 + 6 + 3 + 9 + 2)) * (6 * (3 * 6) + 3 + 3)
2 * 3 + 2
9 + 4
9 * 2 * 5 + (6 * 5 * 7) * 6 * 4
9 + 4 * (5 + 6 * 4) * 8 + 7
6 + 2 * 2 + (7 * 6 * 3 + 6 * 9)
2 + (6 * 4) * (5 + 2 + 6 * 3 + (7 * 2 + 5 + 7 * 5) + 7) * 9 * 5
(3 * 4) + 3 + 9
2 + 4 + ((3 + 6 + 9) + 8 * 2 * (4 + 5 * 3 + 3 * 3 * 3) + 9 * 3) + 3
6 + 9 + 5 + (4 * 6 * 3)
3 * 9 + (5 * 3 + 2 * (4 + 2 * 9 + 2 * 8) * (7 * 5 * 9)) + 2 + 9 + ((4 * 9 + 5 + 6) * (3 + 5 + 5 * 4 + 7) + 3 * 7 + 3 + (3 + 3 + 2))
(3 + (5 + 3 + 7 + 4) * 3 * 8 + 4 + 7) + 3 * ((2 * 9 * 4 * 7) + (5 + 8)) + 3
9 * 2 * 6 * 7 + ((7 * 7 * 9 * 9 + 8) + 7 * 2)
9 * 7 * 5 * (6 + 3 + 3 * 3 * 9) * 2 + 5
8 * 2 + 2 + (2 + 3 * 9 * 9 + 4 + 9) + 4 * 5
5 + 5 + (8 + 7 * 6 + 8) + 3 + (2 + 6 * 2 * 2 * 6)
6 * (5 + 6 + 5) * (9 * 5 + 3) + 7
5 + 9 * (9 + 4 + 5 * 5 * 7 * 8) + 8 + (8 * 3)
8 * 4 + 8 + 9 + (2 + 6 * (6 + 7 * 4 * 3 * 4 + 7) * (3 * 2 * 4) * 9)
(9 * (4 * 8 + 4 * 3) + 7) * 8 * ((8 + 3 + 8 + 5 + 3) + 5 * 7 * 6 * 7)
8 + (6 + 7 + 9) * (5 + (7 + 8 + 9) + 9 * 7) + 8 + (9 + 7) + (2 + 8 * 5)
(5 + 6) * 2 + 2 + 9 + 3 + 5
7 + 6 * (3 * 2 * (6 * 7 * 3 * 9 + 3 + 2) * 6 + 7 + (7 * 5 * 7 * 2 * 9))
((3 + 8 * 6 + 3 * 7) * 9) * 8 * (2 + 8 * 2 + 7) + (7 * 4 + 7 + 6 * 6 * 6)
4 + ((4 + 6 * 2 * 2 + 5 + 8) + (7 + 7) + 5 * 7) + 7
8 * (7 * 7 + 8) + 6 * ((5 * 8 + 5 + 8 + 8) + (9 + 7 + 3) + (7 * 5 * 6 * 3 + 2 + 9) * 4 * (4 + 8 + 6 * 6 * 9)) + 7 * (9 * (2 * 2 * 6 + 7 * 9 * 4))
5 * 6 + 8 * 4
3 + (2 * 9 + 3) + 4 + 4 * 7 * 6
(3 * 5 * 6 * 4) + 5 * 2 * ((5 * 9) * 8)
(6 + 9 * 8 * 9 + 5 * 4) * 2 + 6
(9 + 8 * 3 + 9 + 7) + 3 * 4 + (8 + 6 * 3) * 7 + 8
(6 * (2 + 9)) * 2 * 6 * ((8 + 2 * 6 + 8) + 9)
(8 + 8 * 8 * 9 * (9 * 7 + 3 + 3)) + 2 + 8
((3 * 2 + 5 + 9 * 4) + 9 * (4 * 5 + 4) + (7 + 9 + 6 + 4 + 8) * (3 * 9 * 3 * 5) * 4) + 8 + 2 + (7 + 5 * (2 * 5 + 6) + 5 * 7) + 8
6 + 7 * 3 + 7 + ((3 + 3 * 8 * 7 + 2 * 8) * 6 + 2 + (5 * 2 + 6) + 6)
7 * 4
(5 + 8 + 7 + 7 + 8 * 2) + ((3 + 3 * 4) * 8 + 3 + 9) + 3
8 * (7 * 9 * 5) * 4 + 5
3 + 4 + 8 + ((5 * 2 + 5 + 3 * 9 * 2) * 2 * 2 + 2 * 8) * (9 + 6 + (8 * 7 + 5 + 5) * (5 * 8 * 7 + 5 + 4 + 8)) * 3
((7 * 4) + 3 + 7 + 9 + (9 + 6 * 5 + 5) + 4) * 7 + 2 + 5 * (4 + 9 + 2 + 8 + 6 + (5 * 4 * 6 + 6 * 9)) + 4
(8 * 2 * 9 + 6 * (6 + 6 * 4 * 9 + 5 * 5) * 9) * 8 * 7 + 2
(6 + (4 + 4) + 3) + (6 + 5 + (6 + 9 * 3 + 6 * 4) * 3 * 7) + 2 + 2 + 8
9 * 5 + 6 + 3 + (6 + 3 + 3) + ((5 * 3 * 2) + 7 * (6 * 7 + 6 * 8 * 2) * 9 + 5 * (5 + 4 * 8 + 2 + 3 * 4))
5 * ((4 * 9 * 9) * (8 + 4) * 2 * 6) + (2 * 7 * 7 + (5 + 7 * 9 * 4)) * 4
8 * 3 * ((6 * 8) * 4 * (3 * 6 * 3 * 4)) + 4 + (5 + 9 + 5 + 3 * (2 + 9) * (7 + 4 + 9 * 8 + 9))
8 + (6 * 9 * (7 * 2 + 7 * 2 * 5 * 7) * 3 + 4) + 6
2 + (7 + (2 * 3)) + (4 + 8 + 6 + 5 * 9)
7 + 6 + ((3 + 2 * 4 + 9 * 8) + 3 * 6 + (7 + 3) + 3 * 2) + 4 + 4
2 * 2 * (3 + 3 + 6 * 6 * 7 + 6) * ((4 + 6 + 5 + 9 * 3) * 8)
(9 * 8 * 9 * 3) + 9 + 4 + 8 * 7
3 + ((8 * 6 + 4) * (5 * 6 * 5) * 4 * 5) * 8 + 6 * 4 * 9
((4 + 7 + 4) * (5 + 6) + 8 + 8 * 9) + (2 + 2 + 3) * 9 + 9
(5 + 9 + 8 + 9 + 9 + 8) + 7 * 8 + 4 * 2 + 2
(8 * (8 * 2 + 3 + 8) + 6 * 9) * (4 * 6 * 5 + (4 * 2 * 7) + (8 * 7)) * 4 * (4 + 3 * 2) * 7 + 3
5 + 5 * (6 * 9 + 8 + 6) + 2 * 9
(2 * 7 * 5 + (8 * 2 * 3 + 9)) * 7 + 2 + (4 * 3 + 9 + 3 + 3) * 2 * 5
4 + (3 * 7 * 9 * (5 * 2 * 4)) + (7 * (7 + 5) + 3 + (3 * 9 * 5 + 2 * 6 * 3) + (4 + 9 * 8 * 8 * 5 + 9) * 5) + 4 * 7 + 8
9 * 8 + ((8 * 8 * 2 + 2 * 5 * 8) + (5 * 5 * 8) * (7 + 7 * 2 + 9)) + ((5 + 6 + 6 + 6 * 6 + 2) * 3 * 4 * 3 * 5 * 4) + 7
8 + 4 + 7 + 4 * 9 + (6 + 6 * 2 + 8 * 2 + (6 * 2 * 4))
((5 * 9 + 3 * 4 * 3) * 2) + 7 + (2 * (8 * 4 * 8 * 8 * 8 + 2) * 2)
4 * 2 * 8 * 3 * (5 + (6 * 3 * 7 * 2) * (2 + 5 + 6 + 9 * 5))
7 + 3 + (5 * (9 * 2 + 9) + 4)
9 + 6 + 2 + 4 * ((6 + 7 * 3 + 5 * 9) * 2 * 7 * 6 + 3 + 7) * 6
(9 * 5 * 6 + 3) * 5 + 3
9 * 9 + 3
6 + 7 + 7 * 5 * 9 * (7 * 8 + (7 + 2 * 8 * 6 + 5 + 4))
8 + 5 * 5 + 3
9 * ((4 * 7 * 6 + 3 + 4) * 5 + (6 + 3 + 7) + 7) * 9
3 + (5 + 3 + 4 + (7 + 3 + 5) * 8) * 5 * ((3 + 6 * 8) + 3 * (4 * 6 + 4) + 5 + 5)
3 * 3 * (7 * 2 + 7 * 6 * 9 + 5) * 2 + 6
4 + 5 * 7 + 3 * (2 + 5 * 6 + 7) + (8 + 2 + 6)
3 + 7 * 7 * 2 * (7 + 6 * 7 * 7 + (6 * 5))
7 + 2 + (3 + (3 + 7 + 2 * 6 * 8 + 4)) + (2 + 8)
(9 * (5 * 6 * 3 + 9)) * (7 + 4 * 5 * 3 + 3) * (2 * 3 + 8 + 3)
(8 + 8 * 7 * 3 * 8 * (2 * 9 * 9)) + 3
2 + (3 + (5 * 6 * 2 * 4) * 3 + 7 * 4 + 9) * (2 + 7 + (4 * 5 + 8 * 5 + 9) * 9 + (3 + 4 * 8 * 2 + 8 + 4) * 6) + (3 + 3 + 9 + 4) + (6 + 4 * (6 + 7)) + 4
4 * 8 + 2 + (8 + (9 * 3 * 8) + (3 * 8) * 2 + 8) + 2 * 3
2 + ((2 * 5 + 4 + 8 + 3 * 7) + 3 + 3 + 6 * 3)
9 + (2 * (5 + 3 + 2 + 9 + 2 + 3) * 7 * 4 + (8 * 2 + 7))'''

eqq = '''1 + 2 * 3 + 4 * 5 + 6
1+ (1 * (1))
1 + (2 * 3) + (4 * (5 + 6))
2 * 3 + (4 * 5)
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))'''
eqs = eq.splitlines()


def parens_eq(peq):
    peq = list(peq[1:-1])
    temp = []
    if '(' in peq and ')' in peq:
        return create_eq(peq)
    else:
        return peq

def create_eq(p):
    left = 0
    maths = '*', '+'
    ops = []
    i = iter(p)
    try:
        while True:
            temp = ''
            finaltemp = []
            char = next(i)
            if char in maths:
                ops.append(char)
            elif char.isdigit():
                ops.append(char)
            elif char.startswith('('):
                left+=char.count('(')
                temp+=(char)
                while left>0:
                    char = next(i)
                    if char.startswith('('):
                        left +=char.count('(')
                    elif char.endswith(')'):
                        left -= char.count(')')
                    temp+=char
                finaltemp = parens_eq(temp)
                ops.append(finaltemp)
    except StopIteration:
        if temp:
            ops.append(temp)
    return ops

def evaluate_actual(l, op, r):
    return int(l)+int(r) if op=='+' else int(l)*int(r)
def evaluate(elist):
    ieq = iter(elist)
    try:
        left = next(ieq)
        op = None
        right = None
        while True:
            op = next(ieq)
            right = next(ieq)
            if isinstance(left, list):
                left = evaluate(left)
            if isinstance(right, list):
                right = evaluate(right)
            left = evaluate_actual(left, op , right)
    except StopIteration:
        pass
        #print(left, op, right)
    return left
total = 0
for eq in eqs:
    eq = eq.replace(' ', '')
    eqlist = create_eq(eq)
    num = (evaluate(eqlist))
    print(num, eq)
    total += num
print('total',total)



