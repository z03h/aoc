ox = '''LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLL.LLLLLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLL.LL.LLLLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLL..LLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLL.L.LLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
..LLL..L.L..LL...LL......L..LL..L..LL........L.....LLLL.L.L.L.........L.L..L.L.....L..L............
LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLL.LLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLL.LLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLL
....L..LL...L.L.L.......LL....L.....L..L...L.L.L....LL.L..L...LL...L....L..L...L.............LL..LL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLLLLL.L.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLL.L.LLLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLL..LLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLL.L.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLL
..L...L.L....L........L.......L.L...L..L.LL.........L.......LLL.LL.L...LL....L..L.L.L.LL.....L.....
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLLLL.LLLLLLLLLLLLLLLL
LLLLLLL..LLLLLLLL.LLLLLL.LLLLLLL.LLLL.L.LLLLLLL.LLLLL.LLLLLLL.LLLL.LL.L.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLLLLL.L.L.LLLLL.LLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLL.LLLLL..LLLLLL.LLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
L......L..L...L....L...L...L...L...L..LL...L......LL......LL......LLLL..L.....LL...L.LL..L....LL..L
LLLLLLL.LLLLLLLLL.LLLLLL..LLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLL.LLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLL.LLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLL.LLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLL.LLL.LLLLL.LLLLLLL.LL.L.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.L.LLL.LLLLLLL.LLLL.LLLL..LLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.L.LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
L....L...L....L...L.....L....L.LL..L..L.LL.L..L..LL...LL..L......L...L.LL...L.L.....L.L.LLL.LL.L.L.
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLL..LLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLL..LLLLLLL.LLLLLLLLLLLLLL.LLLLL.LLLLLL..LLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
........L........L......L...L...L.L.....L..L..LL.L..L.L.LLL.L..L..L.L.LL.L.LL......L...L..LLL....L.
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLLLL.LL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLL.L.LL.LLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL..LLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL..LLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLLLLLLL.L..LLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLL.L.LLLL.LLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
..LL..L......L.L.L...LL.L.LLL.L.....LLL..LL...L...L.L.LL....L.....L.LL..LLL...LL...L.....LLL.L..LL.
LLLLLLL.LLLLLLL.L.LLLLLL.LLLLLLL..LLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LL.L.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLL..LLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLL..LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
..L..L.L....L.L..L.L.LL......LLL.L...L..L..L..........LL.......L...LL.L.L.L...L.......L........L...
LLLLLLLLLLLL.LLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLL.L.LLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLL.LLL.LLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLL.LLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLL.LLL.
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLL.L.LLLLLLLLL.LLLLL..LLLLLLL.LLLL.LLLL.LLLL.LLLLL.LLLLLLL.LLLL.LLLL.LL.LLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
..L.......L..LL.L..L..LLLLL..L...L.L.L....L...L.LL.L.......L.....LL.........L.L......L.L..L.....L..
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLL.LLLLLLLLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
L...LL.L..LLLL.LLL.L....L......L.............LL.....L...LL.L...L.L......LL....L......L...LL.L.....L
LLLLLLL.LLLLLLLLL.LLLLLL.L.LLLLL.LLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLL.LLLLLLL.L.LL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLL.LLLLLL.LL.LLLLLLL.LLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLL.LLLL.LLLLLLLLL.LLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLL.LLLLLLLLL.LLLLLL.LLLLLLL.LLLL.LLLLLLLLLLLLLLL.LLLLLLL.LLLL.LLLL.LLLLLLLL.LLLLLLLL.LLLLLLLLL
LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLL.LLLL.LLLLL.LLLLLLL.LLLL.L.LLLLLLLLLLL.LLLLLL.L.LLLLLLLLL'''

import copy
from functools import lru_cache

x=ox.splitlines()
for i in range(len(x)):
    x[i] = list(x[i])
seat1 = x
x=ox.splitlines()
for i in range(len(x)):
    x[i] = list(x[i])
seat2 = x


@lru_cache(maxsize=None)
def create_3x3(row, col):
    points = []
    for i in (row-1, row, row+1):
        for j in (col-1, col, col+1):

            points.append((i, j))
    points.remove((row, col))
    return points

@lru_cache(maxsize=None)
def create_directions(stuff=0):
    points = []
    for i in (-1, 0, 1):
        for j in (-1, 0, 1):

            points.append((i, j))
    points.remove((0, 0))
    return points



def check_adjacent(arr, row, col, check, indexfail):
    tests = []
    points = create_3x3(row, col)
    for i,j in points:
        if i<0 or i>=len(arr) or j<0 or j>=len(arr[i]):
            tests.append(indexfail)
        else:
            tests.append(check(arr[i][j]))
    return tests

def check_star8(arr, row, col):
    #check full seats
    vec = create_directions()
    tests = []
    for i, j in vec:
        found = False
        tempr = row
        tempc= col
        while 1:
            tempr += i
            tempc += j
            if tempr<0 or tempr>=len(arr) or tempc<0 or tempc>=len(arr[i]):
                tests.append(False)
                found=True
                break
            elif arr[tempr][tempc] == '#':
                tests.append(True)
                found=True
                break
            elif arr[tempr][tempc] == 'L':
                tests.append(False)
                found=1
                break
        if not found:
            tests.append(False)
    return tests

def check_star8L(arr, row, col):
    #check if any occupied seats
    vec = create_directions()
    tests = []
    for i, j in vec:
        found = False
        tempr = row
        tempc= col
        while 1:
            tempr += i
            tempc += j
            if tempr<0 or tempr>=len(arr) or tempc<0 or tempc>=len(arr[i]):
                tests.append(True)
                found=True
                break
            elif arr[tempr][tempc] == '#':
                tests.append(False)
                found=True
                return tests
            elif arr[tempr][tempc] == 'L':
                tests.append(True)
                found=1
                break
        if not found:
            tests.append(True)
    return tests

def l_to_s(arr):
    return '\n'.join(''.join(j for j in i) for i in arr)

def s_to_l(arr):
    arr = arr.splitlines()
    for i in range(len(arr)):
        arr[i] = list(arr[i])
    return arr


def switch(a1, a2):
    return copy.deepcopy(a2), a2


current, other = seat1, seat2
prv = copy.deepcopy(current)

for row in range(len(current)):
    for col in range(len(current[row])):
        if current[row][col] == 'L':
            if all(check_star8L(current, row, col)):
                #empty seats
                other[row][col] = '#'
        elif current[row][col] == '#':
            if sum(check_star8(current, row, col))>=5:
                other[row][col] = 'L'
#print(l_to_s(current),'\n')
#print(l_to_s(other),'\n---------------')
current, other= switch(current, other)

count =0

while l_to_s(prv) != l_to_s(current):
    prv = copy.deepcopy(current)
    for row in range(len(current)):
        for col in range(len(current[row])):
            if current[row][col] == 'L':
                if all(check_star8L(current, row, col)):
                    #empty seats
                    other[row][col] = '#'
            elif current[row][col] == '#':
                if sum(check_star8(current, row, col))>=5:
                    other[row][col] = 'L'
    #print(l_to_s(current),'\n')
    #print(l_to_s(other),'\n---------------')
    current, other= switch(current, other)
    print(count)
    count+=1

print(l_to_s(current),'\n')
print(l_to_s(current).count('#'))




